class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        parents = [i for i in range(n)]
        ranks = [1 for i in range(n)]
        
        def find(x):
            while x != parents[x]:
                x = parents[x]
            return x
        
        def union(x,y):
            x,y = find(x), find(y)
            if x != y:
                if ranks[x] > ranks[y]:
                    ranks[x] += ranks[y]
                    parents[y] = x
                else:
                    ranks[y] += ranks[x]
                    parents[x] = y

        for src in range(n):
            for dst in range(n):
                if src != dst and graph[src][dst]:
                    union(src, dst)

        infected = {}
        for cell in initial:
            fp = find(cell)
            parents[cell] = fp
            infected[fp] = infected.get(fp,0) + 1
        
        max_size, vertex = 0, min(initial)
        for cell in initial:
            if infected[parents[cell]] == 1:
                if ranks[parents[cell]] > max_size:
                    max_size = ranks[parents[cell]]
                    vertex = cell
                elif ranks[parents[cell]] == max_size and cell < vertex:
                    vertex = cell
        return vertex